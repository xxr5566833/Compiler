const int a = +5;
const char m = '3';
const int z = 6,b = 10;
CONST char q = 's',p = 't';   

int ss[1];     
char str_test[50]; 
int number[30],ans[30];         
int ra,rb,rc,rd;

void defi(int value){            
    const char D1 = 'd',E1 = 'e',F1 = 'f',G1 = '+',H1 = '-';
    const char I1 = '8';

    int a,b,c,d[10],e[4],f;
    int m[7],n[8],p,q,h[9];
    char i,o[4],r[5],s,t,u[65],v___;
    
    a = value;
    d[5] = value;
    a = D1;
    v___ = G1;
    
    printf("variable and const defination passed!");    
}

void defi_test{
    defi(66);
}


int max(int a,int b){
    if(a > b)
        return (a);
    else{}
    if(b > a)
        return (b);
    else{}
    return (((a) - (-b)) / 2);
}

void fun_def_test{
    int c;
    c = max(max(max(5,+5),5),5);    
    printf("c is ",c);
}

int calcu(int size){
    int i;
    int sum;
    i = 0;
    sum = 0;
    
    
    sum  = sum + number[i];
    i = i + 1;
    while(i < size){
        sum  = sum + number[i];
        i = i + 1;
    }
    return (sum);
}


int calcuCov(int size,int aver){
    int i;
    int cov;
    int temp;
    i = 0;
    cov = 0;
    temp = ((number[i] - aver) * (number[i] - aver));
        cov = cov + temp;
        i = i + 1;
    while(i < size){
        temp = ((number[i] - aver) * (number[i] - aver));
        cov = cov + temp;
        i = i + 1;
    }
    return (cov);
}

int partion(int sta,int end){
    int x,temp;
    int i,j;
    x = number[end];
    i = sta - 1;
    j = sta;
    if(number[j] <= x){
            i = i + 1;
            temp = number[i];
            number[i] = number[j];
            number[j] = temp;
        }else{}
        j = j + 1;
    while(j < end){
        if(number[j] <= x){
            i = i + 1;
            temp = number[i];
            number[i] = number[j];
            number[j] = temp;
        }else{}
        j = j + 1;
    }
    
    temp = number[i + 1];
    number[i + 1] = number[end];
    number[end] = temp;
    return (i+1);
}

void quick_sort(int sta,int end){
    int q;
    if(sta < end){
        q = partion(sta,end);
        quick_sort(sta,q - 1);
        quick_sort(q + 1, end);
    }else{}
}

void reverse(int len){
    char temp;
    int i;
    i = +0; 
    temp = str_test[i];
        str_test[i] = str_test[(len - i)]; 
        str_test[len - i] = temp; 
        i = i + +1;   
    while(i < (len / 2)){
        temp = str_test[i];
        str_test[i] = str_test[(len - i)]; 
        str_test[len - i] = temp; 
        i = i + +1;   
    }
}

int charCount{
    int sum,i;
    sum = 0;
    i = 0;
    
    switch(str_test[i]){
        case 'S':{
            if(str_test[i] == 'a')
                sum = sum + 1;
            else{}
            i = i + 1;
            while(i <= 10){
                if(str_test[i] == 'a')
                    sum = sum + 1;
                else{}
                i = i + 1;
            }
        }
        case 'E':
            return (sum);
        }

        i = i + 1;
    
    while(1)   {
        switch(str_test[i]){
        case 'S':{
            if(str_test[i] == 'a')
                sum = sum + 1;
            else{}
            i = i + 1;
            while(i <= 10){
                if(str_test[i] == 'a')
                    sum = sum + 1;
                else{}
                i = i + 1;
            }
        }
        case 'E':
            return (sum);
        }

        i = i + 1;
    }
}

void other_test1{
    char score;    
    printf(" !#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~");
    
    printf("please input the mode before test(1~3)"); 
    scanf(score);
    switch(score){
    case '1':{
        printf("Easy");
        number[0] = 5;
        number[1] = 7;
        number[2] = 9;
        number[3] = 4;
        number[4] = 1;
        number[5] = 3;
        number[6] = 8;
        number[7] = 10;
        number[8] = 2;
        number[9] = 6;
        ans[0] = 1;
        ans[1] = 2;
        ans[2] = 3;
        ans[3] = 4;
        ans[4] = 5;
        ans[5] = 6;
        ans[6] = 7;
        ans[7] = 8;
        ans[8] = 9;
        ans[9] = 10;
    }
    case '2':{
        printf("Middle");
        ra = ra + 5;
        number[0] = 45;
        number[1] = 19;
        number[2] = 23;
        number[3] = 78;
        number[4] = 83;
        number[5] = 55;
        number[6] = 69;
        number[7] = 37;
        number[8] = 95;
        number[9] = 77;
        number[10] = 145;
        number[11] = 189;
        number[12] = 156;
        number[13] = 123;
        number[14] = 100;
        ans[0] = 19;
        ans[1] = 23;
        ans[2] = 37;
        ans[3] = 45;
        ans[4] = 55;
        ans[5] = 69;
        ans[6] = 77;
        ans[7] = 78;
        ans[8] = 83;
        ans[9] = 95;
        ans[10] = 100;
        ans[11] = 123;
        ans[12] = 145;
        ans[13] = 156;
        ans[14] = 189;
    }
    case '3':{
        printf("Hard");
        ra = ra + 10;
        number[0] = 120;
        number[1] = 854;
        number[2] = 165;
        number[3] = 785;
        number[4] = 666;
        number[5] = 475;
        number[6] = 324;
        number[7] = 218;
        number[8] = 165;
        number[9] = 994;    
        number[10] = 1230;
        number[11] = 1542;
        number[12] = 1462;
        number[13] = 1864;
        number[14] = 1023;
        number[15] = 1000;
        number[16] = 1765;
        number[17] = 1952;
        number[18] = 1949;
        number[19] = 1764;
        ans[0] = 120;
        ans[1] = 165;
        ans[2] = 165;
        ans[3] = 218;
        ans[4] = 324;
        ans[5] = 475;
        ans[6] = 666;
        ans[7] = 785;
        ans[8] = 854;
        ans[9] = 994;
        ans[10] = 1000;
        ans[11] = 1023;
        ans[12] = 1230;
        ans[13] = 1462;
        ans[14] = 1542;
        ans[15] = 1764;
        ans[16] = 1765;
        ans[17] = 1864;
        ans[18] = 1949;
        ans[19] = 1952;
    }
    }

}

void other_test2{
    int i;
    int temp;
    
    str_test[0] = 'S';
    str_test[1] = 'a';
    str_test[2] = 'a';
    str_test[3] = 'a';
    str_test[4] = 'a';
    str_test[5] = 'a';
    str_test[6] = 'b';
    str_test[7] = 'b';
    str_test[8] = 'a';
    str_test[9] = 'b';
    str_test[10] = 'b';
    str_test[11] = 'E';
    str_test[12] = 'E';

    reverse(12);
    
    printf("The character a in str_test is encountered ",charCount);
    
    ra = 10;
    rb = 10;
    rc = 10;
    rd = 10;
    ss[0] = a + (-a);   
    ra = (((ra + rb * rc + rd) / ((((rb * rc)) + (ra + rd)) + (88))) + (max(ra,rb))) - str_test[ss[0]] + 'H' + -70;
    
    ra = +ra + -10;
    while(ra >= 20){
        ra = +ra + -10;
    }

    if(ra < 20){
        ra = ++10 + 0;  
    }else{}
}

void main(){
    int i;
    int sum,cov,aver;
    
    other_test2;
    other_test1;
    
    
    sum = calcu(ra);    
    aver = sum / ra;
    cov = calcuCov(ra,aver);
    cov = cov / ra;
    printf("The sum of input numbers is ",sum);
    printf("The cov of input number is ",cov);

    quick_sort(0,ra-1);  

    i = 0;
    if(number[i] != ans[i]){
        printf("quick sort failed!");
            return;
        }else{}
        i = i + 1;
    while(i < ra){
        if(number[i] != ans[i]){
        printf("quick sort failed!");
            return;
        }else{}
        i = i + 1;
    }
    
    printf("quick sort success!");
    fun_def_test;
    defi_test;
    return;
} 