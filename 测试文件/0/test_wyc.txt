const int MAX_FACTOR = 10, MIN_FACTOR = 0;
const char SUBSCRIPT = '_';
int m, n;
int result;

int factorial(int f) {
    if (f <= 1) {
        return (1);
    } else {
        return (f * factorial(f-1));
    }
}

void display_error(int error_code) {
    switch (error_code) {
        case 1:
            printf("m is too big. ");
        case 2:
            printf("m is too small");
        case 3:
            printf("n is too big. ");
        case 4:
            printf("n is too small. ");
        case 5:
            printf("n should be no greater than m.");
        default:
            {
                printf("no errors seem found. ");
            }
    }
}

int expression_test {
    int this_is_1;
    this_is_1 = 1-(1-(1-(1-(1-(1-(1-(1-(1-(1-(1-(1-(1-(1-(1-(1-(1-(1-(1))))))))))))))))));
    return (this_is_1);
}

int for_factorial(int m) {
    int f;
    f = m;
    m = m - 1;
    while(m){
        f = f * m;
        m = m - 1;
    }
    return (f);
}

void main() {
    int error_code;
    int fact_m, fact_n, fact_m_sub_n;

    error_code = 0;
    scanf(m, n);

    if (expression_test != 1) {
        printf("Expression test failed! ");
    }else{}
    
    if (m > MAX_FACTOR) {
        error_code = 1;
    }else{}
    if (m < MIN_FACTOR) {
        error_code = 2;
    }else{}
    if (n > MAX_FACTOR) {
        error_code = 3;
    }else{}
    if (n < MIN_FACTOR) {
        error_code = 4;
    }else{}
    if (m - n < 0) {
        error_code = 5;
    }else{}
    display_error(error_code);
    if (error_code == 0) {


        fact_m = factorial(m);

        fact_n = factorial(n);
        fact_m_sub_n = factorial(m - n);
        printf("m! = ", fact_m);
        printf("repeat m! : ", for_factorial(m));
        printf("n! = ", fact_n);
        printf("repeat n! : ", for_factorial(n));
        printf("C(m, n) = ", fact_m / fact_n / fact_m_sub_n);
    }else{}
}