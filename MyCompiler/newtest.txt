const char _char__ = '_', _char_lower_a = 'a', _char_lower_b = 'b', _char_lower_c = 'c', _char_lower_d = 'd';
const char _char_upper_A = 'A', _char_upper_B = 'B', _char_upper_C = 'C', _char_D = 'D';
const char _char_0 = '0', _char_1 = '1', _char_2 = '2', _char_3 = '3', _char_4 = '4', _char_5 = '5', _char_6 = '6', _char_7 = '7', _char_8 = '8', _char_9 = '9';
const char _char_plus = '+', _char_minus = '-', _char_mul = '*', _char_div = '/';

const int _int_0 = 0;
const int _int_1 = 1, _int_256 = 256, _int_34545 = 34545;
const int _int_minus400 = -400, _int_minus888 = -888, _int_minus1563 = -1563;
const int _int_plus567 = +567, _int_plus5 = +5, _int_plus1000 = +1000;
const int _int_temp = 77;
const int _int_i = 56;

char _array_char_a[1000], _array_char_c[1000], _simple_char_t;
int _simple_int_e, _array_int_fibarray[1000], _array_int_fibarray_temp[1000], _simple_int_num, _array_int_a[1000];


int _array_int_quicksort_[100], _simple_int_count;
int _simple_int_length;

int fib(int _simple_int_num)
{
	int _int_temp, fib1, fib2;
	int _array_int_fibarray_temp[50];
	if (- _simple_int_num < - (- (- _int_1)))
	{
		if (_array_int_fibarray[_simple_int_num - 1] <= -1)
		{
			fib1 = fib(_simple_int_num - 1);
		}
		else {
			fib1 = _array_int_fibarray[_simple_int_num - 1];
		}
		fib2 = _array_int_fibarray[_simple_int_num - 2];
		_int_temp = fib1 + fib2;
		_array_int_fibarray[_simple_int_num] = _int_temp;					
		return (_int_temp);
	}
	else {
		if (_simple_int_num * (_simple_int_num + _int_1) / (_simple_int_num + 1))
		{
			_array_int_fibarray[1] = 1;
			_array_int_fibarray_temp[1] = _int_1;
			return (_array_int_fibarray_temp[_array_int_fibarray[_array_int_fibarray_temp[_int_1]]] * (_array_int_fibarray[_array_int_fibarray_temp[1]]) + _int_0);
		}
		else {
			_array_int_fibarray[0] = 0;
			_array_int_fibarray_temp[0] = _int_0;
			return (_array_int_fibarray_temp[_array_int_fibarray[_int_0]] * (_array_int_fibarray[_array_int_fibarray_temp[0]]) + _int_0);
		}
	}
	{
		;
	}
}

void main1{
	int _int_i;
	_int_i = 0;
	while(_int_i < 46)
	{
		_array_int_fibarray_temp[_int_i] = - 1;
		_array_int_fibarray[_int_i] = -1;
		_array_char_a[_int_i + _int_0 / _char_plus] = _char_0;
		_array_char_c[_int_i] = '0';
		_int_i = _int_i + 1 - _int_0;
	}
	_simple_int_num = 0;
	printf("please give me your max index in range from 2 to 45 :");
	scanf(_simple_int_num);
	if (_simple_int_num < 2)
	{
		printf("num is less than 2!");
	}
	else {
		if (_simple_int_num > 45)
		{
			printf("num is more than 45!");
		}
		else {
			fib(_simple_int_num + fib(_int_0) - fib(_int_1) + fib(_int_1 + _int_1));
			while (_simple_int_num >= 0) {
				printf(- (- _array_int_fibarray[_simple_int_num]));		
				if(_array_int_fibarray_temp[_simple_int_num] != -1)
				{
					printf("error");
				}
				else{
					{
						{
							{
								;
							}
						}
					}
				}
				printf(" ");
				_simple_int_num = _simple_int_num - _int_1;
			}
		}
	}
}

int printArray {
    int A;
    a = 1;
    if(_simple_int_length >= 1){
        printf(_array_int_quicksort_[0]);
    } else {
        return (-1);
    }
    while (A < _simple_int_length) {
        printf(", ", _array_int_quicksort_[A]);
        A = A + 1;
    }
    return (0);
}

void quickSort(int head, int tail) {
    int a, b, tmp;
    if(head >= tail){
        return;
    }else {}
    a = head + 1;
    b = head;
    while(a <= tail) {
        if(_array_int_quicksort_[a] < _array_int_quicksort_[b]) {
            tmp = _array_int_quicksort_[a];
            _array_int_quicksort_[a] = _array_int_quicksort_[b];
            _array_int_quicksort_[b] = tmp;
            tmp = _array_int_quicksort_[a];
            _array_int_quicksort_[a] = _array_int_quicksort_[b + 1];
            _array_int_quicksort_[b + 1] = tmp;
            b = b + 1;
            _simple_int_count = _simple_int_count + 1;
        } else {;}
        a = a + 1;
    }
    quickSort(head, b - 1);
    quickSort(b + 1, tail);
    return;
}

int return1
{
	return (1);
}

int return999
{
	return (999);
}

int returnminus998
{
	return (-998);
}

void main2
{
    int i;
    int return1;
    _simple_int_count = 0;
    i = 0;
    printf("this is a quick sort, input count of numbers in the first line:");
    scanf(_simple_int_length);
    if(_simple_int_length != 0) {
        _simple_int_length = (_simple_int_length + _simple_int_length * _simple_int_length) / _simple_int_length - 1;
    } else{;}
    printf("input your raw array, split numbers with space:");
    while (i < _simple_int_length) {
        scanf(return1);
        _array_int_quicksort_[i] = return1;
        i = i + return999 + returnminus998;
    }
    switch (_simple_int_length) {
        case 0: printArray;
        case 1: printArray;
        default: {
            if (_simple_int_length < 0) {
                printf("invalid length!");
                return;
            }else {
                quickSort(return999 - 999, _simple_int_length - (return999 + returnminus998));
                printArray;
            }
        }
    }
    printf("exchange time of numbers:", _simple_int_count);
    return;
}

char returna
{
	return (_char_lower_a);
}

char returnplus
{
	return ('+');
}

char returnStar
{											
	return ('*');												
}

char returnChar(char c)
{
	return (c);
}

void main3
{
	int i;
	i = 0;
	while(i < 45)
	{
		_array_char_a[i] = 'a';
		_array_int_a[i] = 100;
		_array_int_fibarray[i] = -1;
		i = i + 1;
		
	}

	i = 0;
	printf(" ");
	
	printf( _char__);							
	_simple_char_t = _char_upper_A;
	printf(" ");
	
	printf( _simple_char_t);
	printf(" ");
	
	printf( '+');
	printf(" ");
	
	printf( _array_char_a[_int_1]);
	printf(" ");
	
	printf( returnChar(_array_char_a[_int_plus5]));
	printf(" ");
	
	printf( returna);
	printf(" ");
	

	printf( _int_34545);
	printf(" ");
	
	printf( _int_minus400);
	printf(" ");
	
	printf( _int_minus1563);
	printf(" ");
	
	printf( _int_plus1000);
	printf(" ");
	
	printf( 0);
	printf(" ");
	
	printf( -888);
	printf(" ");
	
	printf( +456);
	printf(" ");
	
	printf( _array_int_a[20]);
	printf(" ");
	
	printf( _array_int_a[_int_1]);
	printf(" ");
	
	printf( fib(0));
	printf(" ");
	
	printf( fib(_int_1));
	printf(" ");
	
	printf( fib(_int_plus5));
	printf(" ");
	
	printf( (100));
	printf(" ");
	
	printf( (((_array_int_a[20]))));
	printf(" ");
	
	printf( (fib(_int_plus5)));
	printf(" ");
	

	printf( _char__ * _simple_char_t);
	printf(" ");
	
	printf( '+' / _array_char_a[_int_1]);
	printf(" ");
	
	printf( _array_char_a[_int_1] / _int_minus400);
	printf(" ");
	
	printf( returnChar('/') * fib(_int_1));
	printf(" ");
	
	printf( _int_minus400 * -888);
	printf(" ");
	
	printf( _int_plus1000 / fib(_int_plus5));
	printf(" ");
	
	printf( _char__ / _simple_char_t * fib(_int_1));
	printf(" ");
	
	printf( _int_minus400 * -888 * fib(_int_0));
	printf(" ");
	
	printf( _int_minus400 * -888 / _simple_char_t);
	printf(" ");
	
	printf( returnChar(_array_char_a[_int_plus5]) * returnChar(_array_char_a[_int_plus5]) * returnChar(_array_char_a[_int_plus5]));
	printf(" ");
	
	printf( (_int_minus400 * -888 / _simple_char_t) / (_int_minus400 * -888) * ((((_array_int_a[20])))));
	printf(" ");
	
	printf( _char__ * (returnChar(_array_char_a[_int_plus5]) * returnChar(_array_char_a[_int_plus5]) * returnChar(_array_char_a[_int_plus5])));
	printf(" ");
	
	printf( fib(fib(fib(6)) - fib(_int_plus5) ));
	printf(" ");
	
	printf( _array_int_a[fib(_array_int_a[fib(fib(fib(_int_0)))] - _array_int_a[fib(fib(_array_int_a[0] / _array_int_a[0]))])]);
	printf(" ");
	

	printf( + -888);
	printf(" ");
	
	printf( - returna);
	printf(" ");
	
	printf( - _array_int_a[fib(_array_int_a[fib(fib(fib(_int_0)))] - _array_int_a[fib(fib(_array_int_a[0] / _array_int_a[0]))])] + (_int_minus400 * -888 / _simple_char_t) / (_int_minus400 * -888) * ((((_array_int_a[20])))));
	printf(" ");
	
	printf( + _array_int_a[fib(_array_int_a[fib(fib(fib(_int_0)))] - _array_int_a[fib(fib(_array_int_a[0] / _array_int_a[0]))])] - _char__ * (returnChar(_array_char_a[_int_plus5]) * returnChar(_array_char_a[_int_plus5]) * returnChar(_array_char_a[_int_plus5])));
	printf(" ");
	
	printf( + (+ _array_int_a[fib(_array_int_a[fib(fib(fib(_int_0)))] - _array_int_a[fib(fib(_array_int_a[0] / _array_int_a[0]))])] - _char__ * (returnChar(_array_char_a[_int_plus5]) * returnChar(_array_char_a[_int_plus5]) * returnChar(_array_char_a[_int_plus5])))
			 - (- fib(fib(fib(6)) - fib(_int_plus5) )) + _int_minus400 * -888 * fib(_int_0));
	printf(" ");
	
	printf( fib(_int_plus1000 / fib(_int_plus5) - 200 + (+ (+ _array_int_a[fib(_array_int_a[fib(fib(fib(_int_0)))] - _array_int_a[fib(fib(_array_int_a[0] / _array_int_a[0]))])] - _char__ * (returnChar(_array_char_a[_int_plus5]) * returnChar(_array_char_a[_int_plus5]) * returnChar(_array_char_a[_int_plus5])))
			 - (- fib(fib(fib(3 + fib(_int_plus5)) - fib(_int_plus5) ))) + _int_minus400 * -888 * fib(_int_0)) / (- (+ _array_int_a[fib(_array_int_a[fib(fib(fib(_int_0)))] - _array_int_a[fib(fib(_array_int_a[0] / _array_int_a[0]))])] - _char__ * (returnChar(_array_char_a[_int_plus5]) * returnChar(_array_char_a[_int_plus5]) * returnChar(_array_char_a[_int_plus5])))
			 - (- fib(fib(fib(3 + fib(_int_plus5)) - fib(_int_plus5) ))) + _int_minus400 * -888 * fib(_int_0))));




}


void main()
{
	char choose;
	printf("give me your choice  a is Fibonacci  b is quicksort c is expressions print :");
	scanf(choose);
	switch(choose)
	{
	case 'a' : main1;
	case 'b' : main2;
	case 'c' : main3;
	default: printf("out of range");
	}
	return;


}