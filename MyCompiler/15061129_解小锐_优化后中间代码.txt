一共有956条四元式

init fibo
if num > 0 then goto $label0
#RET = 0 + 0
goto $label4
$label0:
if num != 1 then goto $label2
#RET = 1 + 0
goto $label4
$label2:
if num < 2 then goto $label4
$t0 = num - 1
push $t0
call fibo
$t1 = #RET + 0
$t2 = num - 2
push $t2
call fibo
$t3 = #RET + 0
$t1 = $t1 + $t3
#RET = $t1 + 0
$label4:
ret fibo
init main4
scanf int num
push num
call fibo
$t4 = #RET + 0
printf int $t4
main4$end:
ret main4
init fib
$t5 = 0 - _simple_int_num
if $t5 >= -1 then goto $label6
$t6 = _simple_int_num - 1
$t7 = _array_int_fibarray[$t6]
if $t7 > -1 then goto $label8
$t8 = _simple_int_num - 1
push $t8
call fib
$t9 = #RET + 0
fib1 = $t9 + 0
goto $label9
$label8:
$t10 = _simple_int_num - 1
$t11 = _array_int_fibarray[$t10]
fib1 = $t11 + 0
$label9:
$t12 = _simple_int_num - 2
$t13 = _array_int_fibarray[$t12]
$t14 = fib1 + $t13
#RET = $t14 + 0
_array_int_fibarray[_simple_int_num] = $t14
goto $label11
$label6:
$t15 = _simple_int_num + 1
$t16 = _simple_int_num * $t15
$t16 = $t16 / $t15
if $t16 == 0 then goto $label10
$t18 = 1 + 0
_array_int_fibarray[1] = $t18
_array_int_fibarray_temp[1] = $t18
$t20 = _array_int_fibarray_temp[1]
$t21 = _array_int_fibarray[$t20]
$t22 = _array_int_fibarray_temp[$t21]
$t22 = $t22 * $t21
#RET = $t22 + 0
goto $label11
$label10:
$t25 = 0 + 0
_array_int_fibarray[0] = $t25
_array_int_fibarray_temp[0] = $t25
$t27 = _array_int_fibarray[0]
$t28 = _array_int_fibarray_temp[$t27]
$t29 = _array_int_fibarray_temp[0]
$t30 = _array_int_fibarray[$t29]
$t28 = $t28 * $t30
#RET = $t28 + 0
$label11:
ret fib
init main1
_int_i = 0 + 0
$label12:
if _int_i >= 46 then goto $label13
$t31 = -1 + 0
_array_int_fibarray_temp[_int_i] = $t31
_array_int_fibarray[_int_i] = $t31
$t33 = _int_i + 0
$t34 = 48 + 0
_array_char_a[$t33] = $t34
_array_char_c[_int_i] = $t34
_int_i = _int_i + 1
goto $label12
$label13:
_simple_int_num = 0 + 0
printf 0 0
scanf int _simple_int_num
if _simple_int_num >= 2 then goto $label14
printf 0 1
goto $label19
$label14:
if _simple_int_num <= 45 then goto $label16
printf 0 2
goto $label19
$label16:
push 0
call fib
$t37 = #RET + 0
$t38 = _simple_int_num + $t37
push 1
call fib
$t39 = #RET + 0
$t38 = $t38 - $t39
push 2
call fib
$t40 = #RET + 0
$t38 = $t38 + $t40
push $t38
call fib
$label18:
if _simple_int_num < 0 then goto $label19
$t41 = _array_int_fibarray[_simple_int_num]
$t41 = 0 - $t41
$t41 = 0 - $t41
printf int $t41
$t42 = _array_int_fibarray_temp[_simple_int_num]
if $t42 == -1 then goto $label20
printf 0 3
$label20:
printf 0 4
_simple_int_num = _simple_int_num - 1
goto $label18
$label19:
ret main1
init printArray
A = 1 + 0
if _simple_int_length < 1 then goto $label22
$t44 = _array_int_quicksort_[0]
printf int $t44
goto $label23
$label22:
#RET = -1 + 0
goto printArray$end
$label23:
if A >= _simple_int_length then goto $label25
$t45 = _array_int_quicksort_[A]
printf 0 5
printf int $t45
A = A + 1
goto $label23
$label25:
#RET = 0 + 0
printArray$end:
ret printArray
init quickSort
if head < tail then goto $label26
goto quickSort$end
$label26:
a = head + 1
b = head + 0
$label28:
if a > tail then goto $label29
$t48 = _array_int_quicksort_[a]
$t49 = _array_int_quicksort_[b]
if $t48 >= $t49 then goto $label30
$t50 = _array_int_quicksort_[a]
$t51 = _array_int_quicksort_[b]
_array_int_quicksort_[a] = $t51
_array_int_quicksort_[b] = $t50
$t52 = _array_int_quicksort_[a]
tmp = $t52 + 0
$t53 = b + 1
$t54 = _array_int_quicksort_[$t53]
_array_int_quicksort_[a] = $t54
_array_int_quicksort_[$t53] = tmp
b = $t53 + 0
_simple_int_count = _simple_int_count + 1
$label30:
a = a + 1
goto $label28
$label29:
push head
$t59 = b - 1
push $t59
call quickSort
$t60 = b + 1
push $t60
push tail
call quickSort
quickSort$end:
ret quickSort
init return1
#RET = 1 + 0
return1$end:
ret return1
init return999
#RET = 999 + 0
return999$end:
ret return999
init returnminus998
#RET = -998 + 0
returnminus998$end:
ret returnminus998
init main2
_simple_int_count = 0 + 0
i = _simple_int_count + 0
printf 0 6
scanf int _simple_int_length
if _simple_int_length == 0 then goto $label32
$t61 = _simple_int_length * _simple_int_length
$t62 = _simple_int_length + $t61
$t62 = $t62 / _simple_int_length
$t62 = $t62 - 1
_simple_int_length = $t62 + 0
$label32:
printf 0 7
$label34:
if i >= _simple_int_length then goto $label35
scanf int return1
_array_int_quicksort_[i] = return1
call return999
$t63 = #RET + 0
$t64 = i + $t63
call returnminus998
$t65 = #RET + 0
$t64 = $t64 + $t65
i = $t64 + 0
goto $label34
$label35:
$t66 = 0 + 0
if $t66 != _simple_int_length then goto $label37
call printArray
goto $label40
$label37:
$t67 = 1 + 0
if $t67 != _simple_int_length then goto $label38
call printArray
goto $label40
$label38:
if _simple_int_length >= 0 then goto $label39
printf 0 8
goto main2$end
$label39:
call return999
$t68 = #RET + 0
$t68 = $t68 - 999
push $t68
call return999
$t69 = #RET + 0
call returnminus998
$t70 = #RET + 0
$t69 = $t69 + $t70
$t71 = _simple_int_length - $t69
push $t71
call quickSort
call printArray
$label40:
printf 0 9
printf int _simple_int_count
main2$end:
ret main2
init returna
#RET = 97 + 0
returna$end:
ret returna
init returnplus
#RET = 43 + 0
returnplus$end:
ret returnplus
init returnStar
#RET = 42 + 0
returnStar$end:
ret returnStar
init returnChar
#RET = c + 0
returnChar$end:
ret returnChar
init main3
i = 0 + 0
$label41:
if i >= 45 then goto $label42
$t72 = 97 + 0
_array_char_a[i] = $t72
$t73 = 100 + 0
_array_int_a[i] = $t73
$t74 = -1 + 0
_array_int_fibarray[i] = $t74
i = i + 1
goto $label41
$label42:
i = 0 + 0
printf 0 4
printf char 95
_simple_char_t = 65 + 0
printf 0 4
printf char _simple_char_t
printf 0 4
printf char 43
printf 0 4
$t76 = _array_char_a[1]
printf char $t76
printf 0 4
$t77 = _array_char_a[5]
push $t77
call returnChar
$t78 = #RET + 0
printf char $t78
printf 0 4
call returna
$t79 = #RET + 0
printf char $t79
printf 0 4
printf int 34545
printf 0 4
printf int -400
printf 0 4
printf int -1563
printf 0 4
printf int 1000
printf 0 4
printf int 0
printf 0 4
printf int -888
printf 0 4
printf int 456
printf 0 4
$t80 = _array_int_a[20]
printf int $t80
printf 0 4
$t81 = _array_int_a[1]
printf int $t81
printf 0 4
push 0
call fib
$t82 = #RET + 0
printf int $t82
printf 0 4
push 1
call fib
$t83 = #RET + 0
printf int $t83
printf 0 4
push 5
call fib
$t84 = #RET + 0
printf int $t84
printf 0 4
printf int 100
printf 0 4
$t85 = _array_int_a[20]
printf int $t85
printf 0 4
push 5
call fib
$t86 = #RET + 0
printf int $t86
printf 0 4
$t87 = 95 * _simple_char_t
printf int $t87
printf 0 4
$t89 = _array_char_a[1]
$t88 = 43 / $t89
printf int $t88
printf 0 4
$t89 = $t89 / -400
printf int $t89
printf 0 4
push 47
call returnChar
$t90 = #RET + 0
push 1
call fib
$t90 = $t90 * #RET
printf int $t90
printf 0 4
printf int 355200
printf 0 4
push 5
call fib
$t91 = 1000 / #RET
printf int $t91
printf 0 4
$t92 = 95 / _simple_char_t
push 1
call fib
$t92 = $t92 * #RET
printf int $t92
printf 0 4
push 0
call fib
$t93 = 355200 * #RET
printf int $t93
printf 0 4
$t94 = 355200 / _simple_char_t
printf int $t94
printf 0 4
$t95 = _array_char_a[5]
push $t95
call returnChar
$t96 = #RET + 0
$t97 = _array_char_a[5]
push $t97
call returnChar
$t96 = $t96 * #RET
$t98 = _array_char_a[5]
push $t98
call returnChar
$t96 = $t96 * #RET
printf int $t96
printf 0 4
$t99 = 355200 / _simple_char_t
$t99 = $t99 / 355200
$t100 = _array_int_a[20]
$t99 = $t99 * $t100
printf int $t99
printf 0 4
$t101 = _array_char_a[5]
push $t101
call returnChar
$t102 = #RET + 0
$t103 = _array_char_a[5]
push $t103
call returnChar
$t102 = $t102 * #RET
$t104 = _array_char_a[5]
push $t104
call returnChar
$t102 = $t102 * #RET
$t102 = 95 * $t102
printf int $t102
printf 0 4
push 6
call fib
$t105 = #RET + 0
push $t105
call fib
$t106 = #RET + 0
push 5
call fib
$t107 = #RET + 0
$t106 = $t106 - $t107
push $t106
call fib
$t108 = #RET + 0
printf int $t108
printf 0 4
push 0
call fib
$t109 = #RET + 0
push $t109
call fib
$t110 = #RET + 0
push $t110
call fib
$t111 = #RET + 0
$t112 = _array_int_a[$t111]
$t113 = _array_int_a[0]
$t113 = $t113 / $t113
push $t113
call fib
$t115 = #RET + 0
push $t115
call fib
$t116 = #RET + 0
$t117 = _array_int_a[$t116]
$t112 = $t112 - $t117
push $t112
call fib
$t118 = #RET + 0
$t119 = _array_int_a[$t118]
printf int $t119
printf 0 4
printf int -888
printf 0 4
call returna
$t120 = #RET + 0
$t120 = 0 - $t120
printf int $t120
printf 0 4
push 0
call fib
$t121 = #RET + 0
push $t121
call fib
$t122 = #RET + 0
push $t122
call fib
$t123 = #RET + 0
$t124 = _array_int_a[$t123]
$t125 = _array_int_a[0]
$t125 = $t125 / $t125
push $t125
call fib
$t127 = #RET + 0
push $t127
call fib
$t128 = #RET + 0
$t129 = _array_int_a[$t128]
$t124 = $t124 - $t129
push $t124
call fib
$t130 = #RET + 0
$t131 = _array_int_a[$t130]
$t131 = 0 - $t131
$t132 = 355200 / _simple_char_t
$t132 = $t132 / 355200
$t133 = _array_int_a[20]
$t132 = $t132 * $t133
$t131 = $t131 + $t132
printf int $t131
printf 0 4
push 0
call fib
$t134 = #RET + 0
push $t134
call fib
$t135 = #RET + 0
push $t135
call fib
$t136 = #RET + 0
$t137 = _array_int_a[$t136]
$t138 = _array_int_a[0]
$t138 = $t138 / $t138
push $t138
call fib
$t140 = #RET + 0
push $t140
call fib
$t141 = #RET + 0
$t142 = _array_int_a[$t141]
$t137 = $t137 - $t142
push $t137
call fib
$t143 = #RET + 0
$t144 = _array_int_a[$t143]
$t145 = _array_char_a[5]
push $t145
call returnChar
$t146 = #RET + 0
$t147 = _array_char_a[5]
push $t147
call returnChar
$t146 = $t146 * #RET
$t148 = _array_char_a[5]
push $t148
call returnChar
$t146 = $t146 * #RET
$t146 = 95 * $t146
$t144 = $t144 - $t146
printf int $t144
printf 0 4
push 0
call fib
$t149 = #RET + 0
push $t149
call fib
$t150 = #RET + 0
push $t150
call fib
$t151 = #RET + 0
$t152 = _array_int_a[$t151]
$t153 = _array_int_a[0]
$t153 = $t153 / $t153
push $t153
call fib
$t155 = #RET + 0
push $t155
call fib
$t156 = #RET + 0
$t157 = _array_int_a[$t156]
$t152 = $t152 - $t157
push $t152
call fib
$t158 = #RET + 0
$t159 = _array_int_a[$t158]
$t160 = _array_char_a[5]
push $t160
call returnChar
$t161 = #RET + 0
$t162 = _array_char_a[5]
push $t162
call returnChar
$t161 = $t161 * #RET
$t163 = _array_char_a[5]
push $t163
call returnChar
$t161 = $t161 * #RET
$t161 = 95 * $t161
$t159 = $t159 - $t161
push 6
call fib
$t164 = #RET + 0
push $t164
call fib
$t165 = #RET + 0
push 5
call fib
$t166 = #RET + 0
$t165 = $t165 - $t166
push $t165
call fib
$t167 = #RET + 0
$t167 = 0 - $t167
$t159 = $t159 - $t167
push 0
call fib
$t168 = 355200 * #RET
$t159 = $t159 + $t168
printf int $t159
printf 0 4
push 5
call fib
$t169 = 1000 / #RET
$t169 = $t169 - 200
push 0
call fib
$t170 = #RET + 0
push $t170
call fib
$t171 = #RET + 0
push $t171
call fib
$t172 = #RET + 0
$t173 = _array_int_a[$t172]
$t174 = _array_int_a[0]
$t174 = $t174 / $t174
push $t174
call fib
$t176 = #RET + 0
push $t176
call fib
$t177 = #RET + 0
$t178 = _array_int_a[$t177]
$t173 = $t173 - $t178
push $t173
call fib
$t179 = #RET + 0
$t180 = _array_int_a[$t179]
$t181 = _array_char_a[5]
push $t181
call returnChar
$t182 = #RET + 0
$t183 = _array_char_a[5]
push $t183
call returnChar
$t182 = $t182 * #RET
$t184 = _array_char_a[5]
push $t184
call returnChar
$t182 = $t182 * #RET
$t182 = 95 * $t182
$t180 = $t180 - $t182
push 5
call fib
$t185 = #RET + 0
$t185 = 3 + $t185
push $t185
call fib
$t186 = #RET + 0
push 5
call fib
$t187 = #RET + 0
$t186 = $t186 - $t187
push $t186
call fib
$t188 = #RET + 0
push $t188
call fib
$t189 = #RET + 0
$t189 = 0 - $t189
$t180 = $t180 - $t189
push 0
call fib
$t190 = 355200 * #RET
$t180 = $t180 + $t190
push 0
call fib
$t191 = #RET + 0
push $t191
call fib
$t192 = #RET + 0
push $t192
call fib
$t193 = #RET + 0
$t194 = _array_int_a[$t193]
$t195 = _array_int_a[0]
$t195 = $t195 / $t195
push $t195
call fib
$t197 = #RET + 0
push $t197
call fib
$t198 = #RET + 0
$t199 = _array_int_a[$t198]
$t194 = $t194 - $t199
push $t194
call fib
$t200 = #RET + 0
$t201 = _array_int_a[$t200]
$t202 = _array_char_a[5]
push $t202
call returnChar
$t203 = #RET + 0
$t204 = _array_char_a[5]
push $t204
call returnChar
$t203 = $t203 * #RET
$t205 = _array_char_a[5]
push $t205
call returnChar
$t203 = $t203 * #RET
$t203 = 95 * $t203
$t201 = $t201 - $t203
$t201 = 0 - $t201
push 5
call fib
$t206 = #RET + 0
$t206 = 3 + $t206
push $t206
call fib
$t207 = #RET + 0
push 5
call fib
$t208 = #RET + 0
$t207 = $t207 - $t208
push $t207
call fib
$t209 = #RET + 0
push $t209
call fib
$t210 = #RET + 0
$t210 = 0 - $t210
$t201 = $t201 - $t210
push 0
call fib
$t211 = 355200 * #RET
$t201 = $t201 + $t211
$t180 = $t180 / $t201
$t169 = $t169 + $t180
push $t169
call fib
$t212 = #RET + 0
printf int $t212
main3$end:
ret main3
init mod
$t213 = x / y
$t213 = $t213 * y
$t214 = x - $t213
#RET = $t214 + 0
mod$end:
ret mod
init gcd
if b != 0 then goto $label43
#RET = 0 + 0
goto $label46
$label43:
push a
push b
call mod
$t215 = #RET + 0
if $t215 != 0 then goto $label45
#RET = b + 0
goto $label46
$label45:
push b
push a
push b
call mod
$t216 = #RET + 0
push $t216
call gcd
$t217 = #RET + 0
#RET = $t217 + 0
$label46:
ret gcd
init main5
printf 0 10
scanf int a
scanf int b
push a
push b
call gcd
$t218 = #RET + 0
printf 0 11
printf int $t218
main5$end:
ret main5
init Combinatorial
if m != n then goto $label47
#RET = 1 + 0
goto $label50
$label47:
if n != 0 then goto $label49
#RET = 1 + 0
goto $label50
$label49:
$t219 = m - 1
push $t219
push n
call Combinatorial
$t220 = #RET + 0
$t221 = m - 1
push $t221
$t222 = n - 1
push $t222
call Combinatorial
$t223 = #RET + 0
$t220 = $t220 + $t223
#RET = $t220 + 0
$label50:
ret Combinatorial
init main6
printf 0 12
scanf int m
scanf int n
push m
push n
call Combinatorial
$t224 = #RET + 0
printf 0 13
printf int $t224
main6$end:
ret main6
init main7
t1 = 1 + 0
push t1
push t1
call Combinatorial
$t225 = #RET + 0
printf int $t225
main7$end:
ret main7
init optest
j = 2 + 0
$label51:
if j >= 1024 then goto $label52
n = -1 + 0
s = j + 0
i = 1 + 0
$label53:
if i >= j then goto $label54
$t226 = j / i
$t226 = $t226 * i
if $t226 != j then goto $label55
n = n + 1
$t228 = n + 1
s = s - i
if n < 1024 then goto $label57
printf 0 14
goto $label58
$label57:
k[n] = i
$label58:
$label55:
i = i + 1
goto $label53
$label54:
if s != 0 then goto $label59
printf 0 15
printf int j
i = 0 + 0
$label61:
if i > n then goto $label62
$t231 = k[i]
printf 0 16
printf int $t231
i = i + 1
goto $label61
$label62:
printf 0 16
$label59:
j = j + 1
goto $label51
$label52:
printf 0 17
h = 0 + 0
leap = 1 + 0
m = 2 + 0
$label63:
if m > 1024 then goto $label64
k2 = m - 1
i = 2 + 0
$label65:
if i > k2 then goto $label66
$t235 = m / i
$t235 = $t235 * i
if $t235 != m then goto $label67
leap = 0 + 0
$label67:
i = i + 1
goto $label65
$label66:
if leap != 1 then goto $label69
printf 0 4
printf int m
h = h + 1
$t238 = h / 10
$t238 = $t238 * 10
if $t238 != h then goto $label71
printf 0 16
$label71:
$label69:
leap = 1 + 0
m = m + 1
goto $label63
$label64:
printf 0 18
printf int h
optest$end:
ret optest
init main
printf 0 19
scanf char choose
$t240 = 97 + 0
if $t240 != choose then goto $label74
call main1
goto $label73
$label74:
$t241 = 98 + 0
if $t241 != choose then goto $label75
call main2
goto $label73
$label75:
$t242 = 99 + 0
if $t242 != choose then goto $label76
call main3
goto $label73
$label76:
$t243 = 100 + 0
if $t243 != choose then goto $label77
call main4
goto $label73
$label77:
$t244 = 101 + 0
if $t244 != choose then goto $label78
call main5
goto $label73
$label78:
$t245 = 102 + 0
if $t245 != choose then goto $label79
call main6
goto $label73
$label79:
$t246 = 103 + 0
if $t246 != choose then goto $label80
call main7
goto $label73
$label80:
$t247 = 104 + 0
if $t247 != choose then goto $label81
call optest
goto $label73
$label81:
printf 0 20
$label73:
exit 
